package org.example.identityservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {
    private final String[] PUBLIC_URLS = {"/users/create", "/auth/log-·ªãn", "/auth/introspect", "/auth/log-out", "/auth/refresh"};
    private CustomJwtDecoder jwtDecoder;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(10);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http, JwtAuthenticationConverter jwtAuthenticationConverter) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(requests ->
                                requests.requestMatchers(HttpMethod.POST, PUBLIC_URLS).permitAll()
//                                .requestMatchers(HttpMethod.GET, "/users/get-all").hasRole(Role.ADMIN.name())
                                        .anyRequest().authenticated()
                );


        // nh·∫≠n v√† x√°c th·ª±c JWT t·ª´ client trong c√°c request
        // oauth2.jwt(): y√™u c·∫ßu x√°c th·ª±c c√°c request b·∫±ng JWT
        // jwtConfigurer.decoder(jwtDecoder()): ch·ªâ ƒë·ªãnh decoder t√πy ch·ªânh ƒë·ªÉ gi·∫£i m√£ v√† x√°c th·ª±c JWT.
        // üëâ T√≥m l·∫°i: ƒê√¢y l√† n∆°i n√≥i v·ªõi Spring Security r·∫±ng:
        //"M·ªói request ph·∫£i c√≥ JWT trong header. V√† khi nh·∫≠n ƒë∆∞·ª£c, h√£y d√πng h√†m jwtDecoder() ƒë·ªÉ ki·ªÉm tra v√† ph√¢n t√≠ch token ƒë√≥."
        http.oauth2ResourceServer(oauth2 ->
                oauth2.jwt(jwtConfigurer ->
                                jwtConfigurer.decoder(jwtDecoder)
                                        .jwtAuthenticationConverter(jwtAuthenticationConverter())) // chuy·ªÉn JWT -> Authentication
                        .authenticationEntryPoint(new JwtAuthenticationEntryPoint()) // x·∫£y ra ngo·∫°i l·ªá trong filterChain s·∫Ω x·ª≠ l√Ω ·ªü ƒë√¢y
        );

        return http.build();
    }

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();// l√¢·∫•y ra quy·ªÅn t·ª´ claim scope
        grantedAuthoritiesConverter.setAuthorityPrefix("");

        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();
        converter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);
        return converter;
    }

    /**
     * ki·ªÉm tra ph√¢n t√≠ch token
     * Token ph·∫£i ƒë∆∞·ª£c k√Ω b·ªüi server b·∫±ng secret key signerKey,
     * v√† server s·∫Ω d√πng NimbusJwtDecoder ƒë·ªÉ gi·∫£i m√£,
     * x√°c minh ch·ªØ k√Ω, ki·ªÉm tra h·∫°n token.
     */
//    @Bean
//    public JwtDecoder jwtDecoder() {
//        SecretKeySpec secretKeySpec = new SecretKeySpec(signerKey.getBytes(), "HS512");
//        return NimbusJwtDecoder
//                .withSecretKey(secretKeySpec)
//                .macAlgorithm(MacAlgorithm.HS512)
//                .build();
//    }

}
